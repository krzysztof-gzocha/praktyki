name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Sprawdzanie kodu
        uses: actions/checkout@v2

      - name: Install MicroK8s
        uses: balchua/microk8s-actions@v0.4.0
        with:
          channel: '1.30/stable'
          addons: '["dns", "rbac", "hostpath-storage", "registry", "metrics-server", "ingress", "storage", "dashboard", "prometheus"]'

      - name: Instalacja Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Kubernetes Cluster
        run: |
          sudo newgrp microk8s || true
          sudo microk8s kubectl cluster-info

      - name: Helm
        run: |
          newgrp microk8s || true
          helm upgrade --install gitea-environment ./gitea-environment
          
      - name: Tworzenie podów z deployment.yaml
        run: |
          if [ -f deployment.yaml ]; then
              sudo microk8s kubectl apply -f deployment.yaml
              echo "Pody zostały utworzone na podstawie deployment.yaml."
          else
              echo "Nie znaleziono pliku deployment.yaml."
          fi
          
      - name: Czekam 10 sekund na uruchomienie podów
        run: |
          echo "Czekam 10 sekund na uruchomienie podów..."
          sleep 10

      - name: Sprawdzanie deploymentów
        run: |
          echo "Sprawdzanie deploymentów..."
          NAMESPACE=default

          if sudo microk8s kubectl get deployments -n $NAMESPACE; then
              echo "Deploymenty zostały pomyślnie sprawdzone."
          else
              echo "Wystąpił problem przy sprawdzaniu deploymentów!"
              exit 1
          fi

      - name: Czekam 5 sekund przed uruchomieniem testów
        run: |
          echo "Czekam 5 sekund przed uruchomieniem testów..."
          sleep 5
          
      - name: Zatrzymanie deploymentu whoami
        run: |
          echo "Zatrzymuję deployment whoami..."
          if sudo microk8s kubectl scale deployment whoami --replicas=0 -n $NAMESPACE; then
              echo "Deployment whoami został zatrzymany."
          else
              echo "Nie udało się zatrzymać deploymentu whoami."
          fi
          
      - name: Czekam 30 sekund na testy
        run: |
          echo "Czekam 30 sekund na testy..."
          sleep 30

      - name: Uruchamianie testów
        run: |
          echo "Uruchamianie testów..."
          NAMESPACE=default
          
          if sudo microk8s kubectl get deployments -n $NAMESPACE | grep gitea; then
              echo "Deployment gitea został znaleziony."
          else
              echo "Deployment gitea nie został znaleziony!"
              exit 1
          fi

          if sudo microk8s kubectl get deployments -n $NAMESPACE | grep whoami; then
              WHOAMI_DEPLOYMENT=$(sudo microk8s kubectl get deployments -n $NAMESPACE | grep whoami | awk '{print $1}')
              echo "Testuję endpoint whoami..."
              
              WHOAMI_POD=$(sudo microk8s kubectl get pods -n $NAMESPACE --selector=app=whoami -o jsonpath='{.items[0].metadata.name}')
              
              if [ -n "$WHOAMI_POD" ]; then
                  RESPONSE=$(sudo microk8s kubectl exec -n $NAMESPACE $WHOAMI_POD -- curl -s http://localhost)
                  if [[ "$RESPONSE" == *"whoami"* ]]; then
                      echo "Test endpointu whoami zakończony sukcesem."
                  else
                      echo "Test endpointu whoami nie powiódł się."
                      exit 1
                  fi
              else
                  echo "Nie znaleziono podu whoami!"
                  exit 1
              fi
          else
              echo "Deployment whoami nie został znaleziony!"
              exit 1
          fi

      - name: Sprawdzanie stanu zdrowia podów
        run: |
          echo "Sprawdzanie stanu zdrowia podów..."
          if sudo microk8s kubectl get deployment -n $NAMESPACE | grep -v Running; then
              echo "Następujące pody nie są w stanie Running:"
              sudo microk8s kubectl get deployment -n $NAMESPACE | grep -v Running
              exit 1
          else
              echo "Wszystkie pody są w stanie Running."


