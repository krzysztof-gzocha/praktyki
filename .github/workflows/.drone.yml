name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Sprawdzanie kodu
        uses: actions/checkout@v2

      - name: Install MicroK8s
        uses: balchua/microk8s-actions@v0.4.0
        with:
          channel: '1.30/stable'
          addons: '["dns", "rbac", "hostpath-storage", "registry", "metrics-server", "ingress", "storage", "dashboard", "prometheus"]'

      - name: Instalacja Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Kubernetes Cluster
        run: |
          sudo newgrp microk8s || true
          sudo microk8s kubectl cluster-info

      - name: Helm
        run: |
          newgrp microk8s || true
          helm upgrade --install gitea-environment ./gitea-environment
          
      - name: Tworzenie podów z deployment.yaml
        run: |
          if [ -f deployment.yaml ]; then
              sudo microk8s kubectl apply -f deployment.yaml
              echo "Pody zostały utworzone na podstawie deployment.yaml."
          else
              echo "Nie znaleziono pliku deployment.yaml."
          fi
          
      - name: 25 sekundowa przerwa
        run: |
          echo "Czekam 25 sekund na uruchomienie podów..."
          sleep 25
     
      - name: Sprawdzenie dostępnych podów
        run: |
          echo "Sprawdzam dostępne pody..."
          sudo microk8s kubectl get pods --show-labels
          
      - name: 10 sekundowa przerwa
        run: |
          echo "Czekam 10 sekund na uruchomienie podów..."
          sleep 10

      - name: Uruchamianie testów
        run: |
          echo "Uruchamianie testów..."
          if sudo microk8s kubectl get pods | grep gitea; then
              echo "Pod gitea został znaleziony."
          else
              echo "Pod gitea nie został znaleziony!"
              exit 1
          fi

          if sudo microk8s kubectl get pods | grep whoami; then
              WHOAMI_POD=$(sudo microk8s kubectl get pods | grep whoami | awk '{print $1}')
              echo "Testuję endpoint whoami..."
              RESPONSE=$(sudo microk8s kubectl exec $WHOAMI_POD -- curl -s http://localhost)
              if [[ "$RESPONSE" == *"whoami"* ]]; then
                  echo "Test endpointu whoami zakończony sukcesem."
              else
                  echo "Test endpointu whoami nie powiódł się."
                  exit 1
              fi
          else
              echo "Pod whoami nie został znaleziony!"
              exit 1
          fi

      - name: Zatrzymanie podu whoami
        run: |
          echo "Zatrzymuję pod whoami..."
          if sudo microk8s kubectl scale deployment whoami --replicas=0; then
              echo "Pod whoami został zatrzymany."
          else
              echo "Nie udało się zatrzymać poda whoami."
          fi

      - name: Sprawdzanie stanu zdrowia podów
        run: |
          echo "Sprawdzanie stanu zdrowia podów..."
          if sudo microk8s kubectl get pods | grep -v Running; then
              echo "Następujące pody nie są w stanie Running:"
              sudo microk8s kubectl get pods | grep -v Running
              exit 1
          else
              echo "Wszystkie pody są w stanie Running."
          fi


